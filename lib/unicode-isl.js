// Generated by CoffeeScript 1.10.0
(function() {
  var CND, badge, debug, rpr;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'NCR/UNICODE-ISL';

  debug = CND.get_logger('debug', badge);

  this._compile_base_intervals = function(intervals) {

    /* Assemble the ~650 intervals that descrive those parts of the Unicode code space that are assigned
    (over 100,000 codepoints); the rest is (roughly a million codepoints) unassigned. Returns a list of PODs
    with `lo`, `hi`, `tag` attributes.
     */
    var ISL, cp_interval, cp_intervals, hi, i, j, len, len1, lo, range, ref, ucps;
    ISL = require('interskiplist');
    ucps = require('../data/unicode-9.0.0-codepoints.js');
    cp_intervals = ISL.intervals_from_points(null, ucps.codepoints);
    ref = ucps.ranges;
    for (i = 0, len = ref.length; i < len; i++) {
      range = ref[i];
      cp_intervals.push(range);
    }
    intervals.push({
      lo: 0x000000,
      hi: 0x10ffff,
      tag: 'unassigned'
    });
    for (j = 0, len1 = cp_intervals.length; j < len1; j++) {
      cp_interval = cp_intervals[j];
      lo = cp_interval.lo, hi = cp_interval.hi;
      intervals.push({
        lo: lo,
        hi: hi,
        tag: '-unassigned assigned'
      });
    }
    return null;
  };

  this._compile_planes = function(intervals) {
    var hi, i, len, lo, name, ref, ref1, rsg_registry, short_name, type;
    rsg_registry = require('./character-sets-and-ranges');
    ref = rsg_registry['unicode-planes'];
    for (i = 0, len = ref.length; i < len; i++) {
      ref1 = ref[i], short_name = ref1[0], lo = ref1[1], hi = ref1[2];
      type = 'plane';
      name = type + ":" + short_name;
      intervals.push({
        lo: lo,
        hi: hi,
        name: name,
        type: type,
        plane: short_name
      });
    }
    return null;
  };

  this._compile_areas = function(intervals) {
    var hi, i, len, lo, name, ref, ref1, rsg_registry, short_name, type;
    rsg_registry = require('./character-sets-and-ranges');
    ref = rsg_registry['unicode-areas'];
    for (i = 0, len = ref.length; i < len; i++) {
      ref1 = ref[i], short_name = ref1[0], lo = ref1[1], hi = ref1[2];
      type = 'area';
      name = type + ":" + short_name;
      intervals.push({
        lo: lo,
        hi: hi,
        name: name,
        type: type,
        area: short_name
      });
    }
    return null;
  };

  this._compile_blocks = function(intervals) {
    var csg, hi, i, len, lo, name, range, ranges, ref, rsg, rsg_registry, short_name, type;
    rsg_registry = require('./character-sets-and-ranges');
    ref = rsg_registry['names-and-ranges-by-csg'];
    for (csg in ref) {
      ranges = ref[csg];
      if (csg !== 'u') {
        continue;
      }
      for (i = 0, len = ranges.length; i < len; i++) {
        range = ranges[i];
        short_name = range['range-name'];
        rsg = range['rsg'];
        lo = range['first-cid'];
        hi = range['last-cid'];
        type = 'block';
        name = type + ":" + short_name;
        intervals.push({
          lo: lo,
          hi: hi,
          name: name,
          type: type,
          block: short_name,
          rsg: rsg
        });
      }
    }
    return null;
  };

  this._read_or_write_cache = function() {
    var FS, ISL, R, cache_route, i, interval, intervals, intervals_txt, len;
    ISL = require('interskiplist');
    FS = require('fs');
    cache_route = (require('path')).resolve(__dirname, '../data/_cache-Unicode-V9.0.0-base-intervals.json');
    if (FS.existsSync(cache_route)) {
      intervals = require(cache_route);
    } else {
      intervals = [];
      this._compile_base_intervals(intervals);
      this._compile_planes(intervals);
      this._compile_areas(intervals);
      this._compile_blocks(intervals);
      intervals_txt = JSON.stringify(intervals, null, '  ');
      FS.writeFileSync(cache_route, intervals_txt);
    }
    R = ISL["new"]();
    for (i = 0, len = intervals.length; i < len; i++) {
      interval = intervals[i];
      ISL.add(R, interval);
    }
    return R;
  };

  module.exports = this._read_or_write_cache();

}).call(this);

//# sourceMappingURL=unicode-isl.js.map
